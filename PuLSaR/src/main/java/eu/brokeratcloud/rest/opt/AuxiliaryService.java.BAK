package eu.brokeratcloud.rest.opt;

import java.util.*;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAttribute;

import com.hp.hpl.jena.rdf.model.RDFNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import eu.brokeratcloud.common.ServiceDescription;
import eu.brokeratcloud.opt.ConsumerPreferenceProfile;
import eu.brokeratcloud.persistence.RdfPersistenceManager;
import eu.brokeratcloud.persistence.RdfPersistenceManagerFactory;
import eu.brokeratcloud.persistence.SparqlServiceClient;
import eu.brokeratcloud.persistence.SparqlServiceClientFactory;

@Path("/opt/aux")
public class AuxiliaryService extends AbstractManagementService {
	protected static final Logger logger = LoggerFactory.getLogger("eu.brokeratcloud.rest.opt.AuxiliaryService");
	
	// Retrieves service descriptions belonging to given category/ies
	// NOTE: 'cat_id' can be a comma-separated list of classification dimension IDs (e.g. maps,energy,developer)
	@GET
	@Path("/offerings/category/{cat_id}/specifications/")
	@Produces("application/json")
	public ServiceDescription[] getServiceDescriptionsForCategories(@PathParam("cat_id") String catId) {
		try {
			logger.trace("getServiceDescriptionsForCategories: BEGIN: classifications={}", catId);
			
			RdfPersistenceManager pm = RdfPersistenceManagerFactory.createRdfPersistenceManager();
			
/*			String sdRdfType = pm.getClassRdfType(ServiceDescription.class);
			String srvCatUri = pm.getFieldUri(ServiceDescription.class, "serviceCategory");
			String queryStr = "SELECT ?s WHERE { ?s  a  <"+sdRdfType+"> . ?s <"+srvCatUri+"> \""+catId+"\"^^<http://www.w3.org/2001/XMLSchema#string> }";
*/			
			// Retrieve service descriptions based on classification dimensions given
			StringBuilder sb = new StringBuilder();
			sb.append(
				"SELECT ?s \n"+
				"WHERE { \n"+
				"\t?s  a  ?type . \n"+
				"\t?type  <http://www.w3.org/2000/01/rdf-schema#subClassOf>* <http://www.linked-usdl.org/ns/usdl-core#Service> . "
			);
			if (!catId.equals("*")) {
				catId = catId.trim();
				if (catId.isEmpty()) {
					throw new Exception("getServiceDescriptionsForCategories: No classification dimensions specified");
				}
				sb.append( "\n\t?s <http://www.linked-usdl.org/ns/usdl-core/cloud-broker#hasClassificationDimension> ");
				boolean first = true;
				for (String cdId : catId.split("[,]")) {
					cdId = cdId.trim();
					if (cdId.isEmpty()) continue;
					if (first) first=false; else sb.append(",");
					String cdUri = pm.getObjectUri(cdId, eu.brokeratcloud.common.ClassificationDimension.class);
					sb.append("\n\t\t<").append( cdUri ).append(">");
				}
				sb.append(" .");
			}
			sb.append("\n}");
			String queryStr = sb.toString();
			logger.trace("getServiceDescriptionsForCategories: Query: \n"+queryStr);
			
			SparqlServiceClient client = SparqlServiceClientFactory.getClientInstance();
			List<String> results = client.queryForIds(queryStr, "s");
			logger.trace("getServiceDescriptionsForCategories: Results: "+results);
			
			ServiceDescription[] list = new ServiceDescription[results.size()];
			for (int i=0; i<list.length; i++) {
				String srvUri = results.get(i);
				srvUri = srvUri.substring(1, srvUri.length()-1);
				logger.trace("getServiceDescriptionsForCategories: calling getServiceDescription for service: "+srvUri);
				list[i] = getServiceDescription(srvUri, client);
			}
			
			logger.trace("getServiceDescriptionsForCategories: END: results={}", list);
			return list;
		} catch (Exception e) {
			logger.error("getServiceDescriptionsForCategories: EXCEPTION THROWN:\n", e);
			logger.error("getServiceDescriptionsForCategories: Returning an empty array of {}", ServiceDescription.class);
			return new ServiceDescription[0];
		}
	}
	
	// INTERNAL USAGE ONLY!!!
	// Retrieves service description for given URI
	protected ServiceDescription getServiceDescription(String srvUri, SparqlServiceClient client) {
		try {
			logger.debug("getServiceDescription(URI): BEGIN: service-uri={}", srvUri);
			logger.debug("getServiceDescription(URI): Retrieving Service Description: uri={}", srvUri);
			
			// Query for basic service information
			String queryStr1 = "SELECT ?title ?creator WHERE { FILTER (?s = <%s>) . ?s <http://purl.org/dc/terms/title> ?title . ?s <http://purl.org/dc/terms/creator> ?creator . }";
			logger.trace("getServiceDescription(URI): Query-1: \n{}", queryStr1);
			queryStr1 = String.format(queryStr1, srvUri);
			List<Map<String,RDFNode>> results = client.queryAndProcess(queryStr1);
			if (results==null || results.size()==0) return null;
			if (results.size()>1) throw new Exception("getServiceDescription(URI): More than one service descriptions returned");
			
			// create service description object
			Map<String,RDFNode> data = results.get(0);
			String srvName = data.get("title").toString();
			String srvProvider = data.get("creator").toString();
			
			ServiceDescription sd = new ServiceDescription();
			sd.setId( srvUri );			// service id is not really used anywhere else but internally in RecommendationManager. No need it assign a new service id
			sd.setName( srvName );
			sd.setServiceName( srvName );
			sd.setOwner( srvProvider );
			
			// Query for service attribute values
			String queryStr2 = 
					"SELECT ?attrUri ?attrId ?attrName ?val ?unit ?typ \n" +
					"WHERE { ?s ?p ?o \n" +
					"	FILTER (?s = <%s>) . \n" +
					"	{ \n" +
					"		?p <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://purl.org/goodrelations/v1#quantitativeProductOrServiceProperty> . \n" +
					"		?o <http://purl.org/goodrelations/v1/hasValue> ?val . \n" +
					"		?o <http://purl.org/goodrelations/v1/hasUnitOfMeasurement> ?unit . \n" +
					"		?p <http://www.w3.org/2000/01/rdf-schema#range> ?apv . \n" +
					"		?def <http://www.w3.org/2000/01/rdf-schema#range> ?apv . \n" +
					"		?def <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://www.linked-usdl.org/ns/usdl-pref#hasDefaultQuantitativeValue> . \n" +
					"		BIND ('NT' as ?typ) . \n" +
					"	} \n" +
					"	UNION \n" +
					"	{ \n" +
					"		?p <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://purl.org/goodrelations/v1#qualitativeProductOrServiceProperty> . \n" +
					"		?o <http://www.w3.org/2000/01/rdf-schema#label> ?val . \n" +
					"		?def <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://www.linked-usdl.org/ns/usdl-pref#hasDefaultQualitativeValue> . \n" +
					"		BIND ('L' as ?typ) . \n" +
					"	} . \n" +
					"	?p <http://www.w3.org/2000/01/rdf-schema#range> ?apv . \n" +
					"	?def <http://www.w3.org/2000/01/rdf-schema#range> ?apv . \n" +
					"	?def <http://www.w3.org/2000/01/rdf-schema#domain> ?pv . \n" +
					"	?pv <http://www.linked-usdl.org/ns/usdl-pref#refToServiceAttribute> ?attrUri . \n" +
					"	?attrUri <http://purl.org/dc/terms/title> ?attrName . \n" +
					"	?attrUri <http://purl.org/dc/terms/identifier> ?attrId . \n" +
					"} \n" +
					"ORDER BY ?attr ?o ?x \n";
			queryStr2 = String.format(queryStr2, srvUri);
			logger.trace("getServiceDescription(URI): Query-2: \n{}", queryStr2);
			List<Map<String,RDFNode>> results2 = client.queryAndProcess(queryStr2);
			if (results!=null && results.size()>0) {
				HashMap<String,String> attrs = new HashMap<String,String>();
				for (Map<String,RDFNode> attrData : results2) {
					if (attrData==null || attrData.size()==0) continue;
					// for each attribute...
					Object o;
					String attrUri = (o=attrData.get("attrUri"))!=null ? val2str(o) : null;
					String attrId = (o=attrData.get("attrId"))!=null ? val2str(o) : null;
					String attrName = (o=attrData.get("attrName"))!=null ? val2str(o) : null;
					String val   = (o=attrData.get("val"))!=null ? val2str(o) : null;
					String unit  = (o=attrData.get("unit"))!=null ? val2str(o) : null;
					String typ   = (o=attrData.get("typ"))!=null ? val2str(o) : null;
					
//XXX: include unit ??:		if (typ.equals("NT")) attrs.put(attrId, val+" "+unit);
					if (typ.equals("NT")) attrs.put(attrId, val);
					else if (typ.equals("L")) {
						if (attrs.containsKey(attrId)) attrs.put(attrId, attrs.get(attrId)+","+val); else attrs.put(attrId, val);
					}
					//logger.trace("ATTR: id={}, name={}, uri={}\n\ttyp={}, val={}, unit={}\n", attrId, attrName, attrUri, typ, val, unit);
				}
				//logger.trace("ATTRIBUTES: {}", attrs);
				for (String at : attrs.keySet()) {
					sd.setServiceAttributeValue(at, attrs.get(at));
				}
			}
			
			logger.debug("getServiceDescription: END: uri={}:\nOUTPUT:\n{}", srvUri, sd);
			return sd;
		} catch (Exception e) {
			logger.error("getServiceDescription(URI): EXCEPTION THROWN:\n", e);
			//e.printStackTrace(System.err);
			logger.error("getServiceDescription(URI): OUTPUT: Returning null");
			return null;
		}
	}
	
	// INTERNAL USAGE ONLY!!!
	protected String val2str(Object o) {
		if (o==null) return null;
		String str = o.toString().trim();
		int p = str.indexOf("^^");
		if (p!=-1) str = str.substring(0,p);
		else {
			p = str.lastIndexOf("@");
			if (p!=-1) {
				int p2 = str.lastIndexOf("\"");
				if (p>p2) str = str.substring(0,p);
			}
		}
		if (str.startsWith("\"") && str.endsWith("\"") && str.length()>1) str = str.substring(1,str.length()-1);
		return str;
	}
	
	// Retrieves service description based on category/ies (cat_id) and service URI (serv_id)
	// Note: category/ies is/are ignored. Retained for backward compatibility to specified Broker@Cloud Rest API
	@GET
	@Path("/offerings/category/{cat_id}/services/{serv_id}")
	@Produces("application/json")
	public ServiceDescription getServiceDescription(@PathParam("cat_id") String catId, @PathParam("serv_id") String srvUri) {
		return getServiceDescription(srvUri);
	}
	
	// Retrieves service description based on service URI (serv_id)
	@GET
	@Path("/offerings/{serv_id}")
	@Produces("application/json")
	public ServiceDescription getServiceDescription(@PathParam("serv_id") String srvUri) {
		try {
/*			RdfPersistenceManager pm = RdfPersistenceManagerFactory.createRdfPersistenceManager();
			logger.debug("getServiceDescription: Retrieving Service Description: {}", srvId);
			ServiceDescription sd = (ServiceDescription)pm.find(srvId, ServiceDescription.class);
*/
			SparqlServiceClient client = SparqlServiceClientFactory.getClientInstance();
			ServiceDescription sd = getServiceDescription(srvUri, client);
			return sd;
		} catch (Exception e) {
			logger.error("getServiceDescription(URI): EXCEPTION THROWN: \n", e);
			//e.printStackTrace(System.err);
			logger.debug("getServiceDescription(URI): OUTPUT: Returning null");
			return null;
		}
	}
}